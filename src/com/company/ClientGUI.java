package com.company;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.stream.IntStream;

import static java.awt.EventQueue.invokeLater;
import static java.lang.Short.MAX_VALUE;
import static java.util.logging.Logger.getLogger;
import static javax.swing.BorderFactory.createLineBorder;
import static javax.swing.GroupLayout.Alignment.*;
import static javax.swing.GroupLayout.DEFAULT_SIZE;
import static javax.swing.GroupLayout.PREFERRED_SIZE;
import static javax.swing.LayoutStyle.ComponentPlacement.RELATED;
import static javax.swing.LayoutStyle.ComponentPlacement.UNRELATED;
import static javax.swing.UIManager.*;

/**
 * CM3113 Session 2018-19 Starting point for Coursework
 * ClientGUI.java is front-end for using Client.java to perform single
 * and multiple connections  connects to server to order tickets
 */
public class ClientGUI extends JFrame {

    private Socket theIncoming;
    private BufferedReader theInput;
    private PrintWriter theOutput;
    private Client theClient;
    private ExecutorService executorService;

    private volatile int thePortNo;
    private volatile boolean finished;

    private Server server = Server.getInstance();

    private final int NO_CLIENTS = 0;
    private ClientGUI() {
        initComponents();
        thePortNo = 8189;
        final byte THREAD_POOL_SIZE = 8;
        this.executorService = Executors.newFixedThreadPool(THREAD_POOL_SIZE);
    }

    private synchronized String getNumberTickets() {
        return textNumTickets.getText();
    }

    private static String generateRandomCustomerName() {
        String name = "";
        int code = (int) (Math.random() * 17576);
        int[] digits = new int[]{code % 26, (code / 26) % 26, (code / 676) % 26};
        return "" + (char) (digits[0] + 65) + (char) (digits[1] + 65) + (char) (digits[2] + 65);
    }

    private int generateRandomNumberTickets(int max) {
        return 1 + (int) (max * Math.random());
    }

    void updateEventDetails(String cap, String name) {
        textEventName.setText(name);
        textEventCapacity.setText(cap);
    }

    void updateText(String s) {
        confirmText.append("\n" + s);
    }

    public void updateTime(int i) {
        confirmText.append(i + "");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new JPanel();
        textEventName = new JTextField();
        jLabel1 = new JLabel();
        jLabel2 = new JLabel();
        textEventCapacity = new JTextField();
        jLabel9 = new JLabel();
        jPanel2 = new JPanel();
        jLabel6 = new JLabel();
        connectButton = new JButton();
        jLabel3 = new JLabel();
        textNumTickets = new JTextField();
        applyButton = new JButton();
        jPanel3 = new JPanel();
        jLabel7 = new JLabel();
        jLabel5 = new JLabel();
        multipleButton = new JButton();
        jLabel8 = new JLabel();
        maxTicketsPerCustomerSpinner = new JSpinner();
        numberCustomersSpinner = new JSpinner();
        jPanel4 = new JPanel();
        jLabel10 = new JLabel();
        jScrollPane1 = new JScrollPane();
        confirmText = new JTextArea();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("Client end for testing ticket allocation");

        jPanel1.setBorder(createLineBorder(new Color(0, 0, 0)));

        jLabel1.setText("Event Name");

        jLabel2.setText("Event Capacity");

        jLabel9.setText("Event Information");

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(LEADING)
                                        .addComponent(jLabel9)
                                        .addComponent(jLabel1)
                                        .addComponent(jLabel2))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(LEADING)
                                        .addComponent(textEventCapacity, PREFERRED_SIZE, 70, PREFERRED_SIZE)
                                        .addComponent(textEventName, PREFERRED_SIZE, 133, PREFERRED_SIZE))
                                .addContainerGap(DEFAULT_SIZE, MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap(DEFAULT_SIZE, MAX_VALUE)
                                .addComponent(jLabel9)
                                .addPreferredGap(UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(25, 25, 25)
                                                .addGroup(jPanel1Layout.createParallelGroup(BASELINE)
                                                        .addComponent(jLabel2)
                                                        .addComponent(textEventCapacity, PREFERRED_SIZE, DEFAULT_SIZE, PREFERRED_SIZE)))
                                        .addGroup(jPanel1Layout.createParallelGroup(BASELINE)
                                                .addComponent(textEventName, PREFERRED_SIZE, DEFAULT_SIZE, PREFERRED_SIZE)
                                                .addComponent(jLabel1)))
                                .addGap(270, 270, 270))
        );

        jPanel2.setBorder(createLineBorder(new Color(0, 0, 0)));

        jLabel6.setText("Single Client");

        connectButton.setText("Connect to Server");
        connectButton.addActionListener(this::connectButtonActionPerformed);

        jLabel3.setText("Number of Tickets to Request");

        textNumTickets.setText("4");

        applyButton.setText("Apply for tickets");
        applyButton.setEnabled(false);
        applyButton.addActionListener(this::applyButtonActionPerformed);

        GroupLayout jPanel2Layout = new GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel2Layout.createParallelGroup(TRAILING)
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(jLabel6)
                                                .addGap(56, 56, 56)
                                                .addComponent(connectButton))
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(jLabel3)
                                                .addGap(23, 23, 23)
                                                .addComponent(textNumTickets, PREFERRED_SIZE, 70, PREFERRED_SIZE))
                                        .addComponent(applyButton))
                                .addContainerGap(DEFAULT_SIZE, MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel2Layout.createParallelGroup(BASELINE)
                                        .addComponent(jLabel6)
                                        .addComponent(connectButton))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(BASELINE)
                                        .addComponent(jLabel3)
                                        .addComponent(textNumTickets, PREFERRED_SIZE, DEFAULT_SIZE, PREFERRED_SIZE))
                                .addPreferredGap(UNRELATED)
                                .addComponent(applyButton)
                                .addContainerGap(DEFAULT_SIZE, MAX_VALUE))
        );

        jPanel3.setBorder(createLineBorder(new Color(0, 0, 0)));

        jLabel7.setText("Multiple Clients");

        jLabel5.setText("Number of Customers to Simulate");

        multipleButton.setText("Multiple ticket requests");
        multipleButton.addActionListener(this::multipleButtonActionPerformed);

        jLabel8.setText("Max Tickets per Customer");

        maxTicketsPerCustomerSpinner.setModel(new SpinnerNumberModel(1, 1, 10, 1));

        numberCustomersSpinner.setModel(new SpinnerNumberModel(1, 1, 10, 1));

        GroupLayout jPanel3Layout = new GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
                jPanel3Layout.createParallelGroup(LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel3Layout.createParallelGroup(LEADING)
                                        .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addComponent(jLabel7)
                                                .addGap(26, 26, 26)
                                                .addComponent(multipleButton)
                                                .addGap(0, 0, MAX_VALUE))
                                        .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addGroup(jPanel3Layout.createParallelGroup(LEADING)
                                                        .addComponent(jLabel5)
                                                        .addComponent(jLabel8))
                                                .addPreferredGap(RELATED, DEFAULT_SIZE, MAX_VALUE)
                                                .addGroup(jPanel3Layout.createParallelGroup(LEADING)
                                                        .addComponent(numberCustomersSpinner, TRAILING, PREFERRED_SIZE, 49, PREFERRED_SIZE)
                                                        .addComponent(maxTicketsPerCustomerSpinner, TRAILING, PREFERRED_SIZE, 49, PREFERRED_SIZE))))
                                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
                jPanel3Layout.createParallelGroup(LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel3Layout.createParallelGroup(BASELINE)
                                        .addComponent(jLabel7)
                                        .addComponent(multipleButton))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel3Layout.createParallelGroup(BASELINE)
                                        .addComponent(jLabel5)
                                        .addComponent(numberCustomersSpinner, PREFERRED_SIZE, DEFAULT_SIZE, PREFERRED_SIZE))
                                .addPreferredGap(UNRELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(BASELINE)
                                        .addComponent(jLabel8)
                                        .addComponent(maxTicketsPerCustomerSpinner, PREFERRED_SIZE, DEFAULT_SIZE, PREFERRED_SIZE))
                                .addContainerGap(20, MAX_VALUE))
        );

        jPanel4.setBorder(createLineBorder(new Color(0, 0, 0)));

        jLabel10.setText("History");

        confirmText.setColumns(20);
        confirmText.setRows(5);
        jScrollPane1.setViewportView(confirmText);

        GroupLayout jPanel4Layout = new GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
                jPanel4Layout.createParallelGroup(LEADING)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel4Layout.createParallelGroup(LEADING)
                                        .addGroup(jPanel4Layout.createSequentialGroup()
                                                .addComponent(jLabel10)
                                                .addGap(0, 0, MAX_VALUE))
                                        .addComponent(jScrollPane1, TRAILING, DEFAULT_SIZE, 529, MAX_VALUE))
                                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
                jPanel4Layout.createParallelGroup(LEADING)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel10)
                                .addPreferredGap(RELATED)
                                .addComponent(jScrollPane1)
                                .addContainerGap())
        );

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addGroup(layout.createParallelGroup(LEADING, false)
                                        .addComponent(jPanel3, DEFAULT_SIZE, DEFAULT_SIZE, MAX_VALUE)
                                        .addComponent(jPanel1, PREFERRED_SIZE, DEFAULT_SIZE, PREFERRED_SIZE)
                                        .addComponent(jPanel2, DEFAULT_SIZE, DEFAULT_SIZE, MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addComponent(jPanel4, DEFAULT_SIZE, DEFAULT_SIZE, MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(LEADING)
                        .addGroup(TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(TRAILING)
                                        .addComponent(jPanel4, DEFAULT_SIZE, DEFAULT_SIZE, MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jPanel1, PREFERRED_SIZE, 98, PREFERRED_SIZE)
                                                .addPreferredGap(UNRELATED)
                                                .addComponent(jPanel2, DEFAULT_SIZE, DEFAULT_SIZE, MAX_VALUE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jPanel3, PREFERRED_SIZE, DEFAULT_SIZE, PREFERRED_SIZE)))
                                .addGap(26, 26, 26))
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void applyButtonActionPerformed(ActionEvent evt) {
        if (theClient == null) return;
        int numberTickets = Integer.parseInt(this.getNumberTickets());
        theClient.sendTicketRequest(generateRandomCustomerName(), numberTickets);
        this.connectButton.setEnabled(true);
        this.applyButton.setEnabled(false);
        server.totalClients.getAndIncrement(); //INCREMENT SIZE OF TOTAL CLIENTS!!!
        System.out.println("(Single) Total customers now: " + server.totalClients.toString());
    }

    private void multipleButtonActionPerformed(ActionEvent evt) {
        final int MISSED_CUSTOMER = 1; // when adding multiple customers using the multiple button,
        // if 5 new customers order tickets - 4 will be added and the
        // fifth will be added when you press the apply tickets button;
        int nClients = (Integer) this.numberCustomersSpinner.getValue();
        int maxTicketsPerCustomer = (Integer) this.maxTicketsPerCustomerSpinner.getValue();
        this.multipleButton.setEnabled(false);
        Client[] clients = new Client[nClients];        //thread pool instead;

        // THROWS AN Exception in thread "AWT-EventQueue-0" java.lang.NullPointerException
        //server.totalClients.getAndSet((clients.length - 1) + server.totalClients.get());
        //System.out.println("(Multiple) Total customers now: " + MISSED_CUSTOMER + server.totalClients.toString());

        IntStream.range(0, nClients).forEach(n -> {
            clients[n] = new Client(thePortNo, this);
            this.executorService.submit(clients[n]);
        });

        IntStream.range(0, nClients).forEach(n -> {
            int numberTickets = this.generateRandomNumberTickets(maxTicketsPerCustomer);
            String name = generateRandomCustomerName();
            clients[n].sendTicketRequest(name, numberTickets);
        });

        this.multipleButton.setEnabled(true);
    }

    private void connectButtonActionPerformed(ActionEvent evt) {
        /* starts a single Client that waits for user to send ticket request */
        theClient = new Client(thePortNo, this);
        this.executorService.submit(theClient);
        this.connectButton.setEnabled(false);
        this.applyButton.setEnabled(true);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (LookAndFeelInfo info : getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            getLogger(ClientGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        invokeLater(() -> new ClientGUI().setVisible(true));
    }

    private JButton applyButton;
    private JTextArea confirmText;
    private JButton connectButton;
    private JLabel jLabel1;
    private JLabel jLabel10;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JLabel jLabel5;
    private JLabel jLabel6;
    private JLabel jLabel7;
    private JLabel jLabel8;
    private JLabel jLabel9;
    private JPanel jPanel1;
    private JPanel jPanel2;
    private JPanel jPanel3;
    private JPanel jPanel4;
    private JScrollPane jScrollPane1;
    private JSpinner maxTicketsPerCustomerSpinner;
    private JButton multipleButton;
    private JSpinner numberCustomersSpinner;
    private JTextField textEventCapacity;
    private JTextField textEventName;
    private JTextField textNumTickets;
}
